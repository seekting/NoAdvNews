package com.seekting.noadvnews.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, String> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property PubDate = new Property(1, String.class, "pubDate", false, "PUB_DATE");
        public final static Property ChannelName = new Property(2, String.class, "channelName", false, "CHANNEL_NAME");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property ChannelId = new Property(4, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property Link = new Property(5, String.class, "link", false, "LINK");
        public final static Property AllList = new Property(6, String.class, "allList", false, "ALL_LIST");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property HavePic = new Property(8, boolean.class, "havePic", false, "HAVE_PIC");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Imageurls = new Property(10, String.class, "imageurls", false, "IMAGEURLS");
        public final static Property Source = new Property(11, String.class, "source", false, "SOURCE");
        public final static Property Html = new Property(12, String.class, "html", false, "HTML");
        public final static Property Nid = new Property(13, String.class, "nid", false, "NID");
        public final static Property PubTime = new Property(14, long.class, "pubTime", false, "PUB_TIME");
    };

    private DaoSession daoSession;


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PUB_DATE\" TEXT," + // 1: pubDate
                "\"CHANNEL_NAME\" TEXT," + // 2: channelName
                "\"DESC\" TEXT," + // 3: desc
                "\"CHANNEL_ID\" TEXT," + // 4: channelId
                "\"LINK\" TEXT," + // 5: link
                "\"ALL_LIST\" TEXT," + // 6: allList
                "\"CONTENT\" TEXT," + // 7: content
                "\"HAVE_PIC\" INTEGER NOT NULL ," + // 8: havePic
                "\"TITLE\" TEXT," + // 9: title
                "\"IMAGEURLS\" TEXT," + // 10: imageurls
                "\"SOURCE\" TEXT," + // 11: source
                "\"HTML\" TEXT," + // 12: html
                "\"NID\" TEXT," + // 13: nid
                "\"PUB_TIME\" INTEGER NOT NULL );"); // 14: pubTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, News entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(2, pubDate);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(3, channelName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(5, channelId);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(6, link);
        }
 
        String allList = entity.getAllList();
        if (allList != null) {
            stmt.bindString(7, allList);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
        stmt.bindLong(9, entity.getHavePic() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String imageurls = entity.getImageurls();
        if (imageurls != null) {
            stmt.bindString(11, imageurls);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(12, source);
        }
 
        String html = entity.getHtml();
        if (html != null) {
            stmt.bindString(13, html);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(14, nid);
        }
        stmt.bindLong(15, entity.getPubTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(2, pubDate);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(3, channelName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(5, channelId);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(6, link);
        }
 
        String allList = entity.getAllList();
        if (allList != null) {
            stmt.bindString(7, allList);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
        stmt.bindLong(9, entity.getHavePic() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String imageurls = entity.getImageurls();
        if (imageurls != null) {
            stmt.bindString(11, imageurls);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(12, source);
        }
 
        String html = entity.getHtml();
        if (html != null) {
            stmt.bindString(13, html);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(14, nid);
        }
        stmt.bindLong(15, entity.getPubTime());
    }

    @Override
    protected final void attachEntity(News entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pubDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // channelId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // link
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // allList
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.getShort(offset + 8) != 0, // havePic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imageurls
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // source
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // html
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // nid
            cursor.getLong(offset + 14) // pubTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPubDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannelName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChannelId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAllList(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHavePic(cursor.getShort(offset + 8) != 0);
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImageurls(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSource(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHtml(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPubTime(cursor.getLong(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(News entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
